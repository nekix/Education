// <auto-generated />
using System;
using CarPark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarPark.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010143520_VehicleIdIntToIdGuid_4")]
    partial class VehicleIdIntToIdGuid_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarPark.Drivers.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_license_number");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int?>("assigned_vehicle_id")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_driver");

                    b.HasIndex("EnterpriseId")
                        .HasDatabaseName("ix_driver_enterprise_id");

                    b.HasIndex("assigned_vehicle_id")
                        .IsUnique()
                        .HasDatabaseName("ix_driver_assigned_vehicle_id");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("CarPark.Enterprises.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("TimeZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("time_zone_id");

                    b.HasKey("Id")
                        .HasName("pk_enterprise");

                    b.HasIndex("TimeZoneId")
                        .HasDatabaseName("ix_enterprise_time_zone_id");

                    b.ToTable("enterprise", (string)null);
                });

            modelBuilder.Entity("CarPark.Managers.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_user_id");

                    b.HasKey("Id")
                        .HasName("pk_manager");

                    b.HasIndex("IdentityUserId")
                        .HasDatabaseName("ix_manager_identity_user_id");

                    b.ToTable("manager", (string)null);
                });

            modelBuilder.Entity("CarPark.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("EnginePowerKW")
                        .HasColumnType("double precision")
                        .HasColumnName("engine_power_kw");

                    b.Property<string>("FuelSystemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuel_system_type");

                    b.Property<string>("FuelTankVolumeLiters")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuel_tank_volume_liters");

                    b.Property<double>("MaxLoadingWeightKg")
                        .HasColumnType("double precision")
                        .HasColumnName("max_loading_weight_kg");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("integer")
                        .HasColumnName("seats_count");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transmission_type");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id")
                        .HasName("pk_model");

                    b.ToTable("model", (string)null);
                });

            modelBuilder.Entity("CarPark.Rides.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid?>("end_geo_time_point_id")
                        .HasColumnType("uuid")
                        .HasColumnName("end_geo_time_point_id");

                    b.Property<Guid?>("start_geo_time_point_id")
                        .HasColumnType("uuid")
                        .HasColumnName("start_geo_time_point_id");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_ride");

                    b.HasIndex("end_geo_time_point_id")
                        .HasDatabaseName("ix_ride_end_geo_time_point_id");

                    b.HasIndex("start_geo_time_point_id")
                        .HasDatabaseName("ix_ride_start_geo_time_point_id");

                    b.HasIndex("vehicle_id")
                        .HasDatabaseName("ix_ride_vehicle_id");

                    b.ToTable("ride", (string)null);
                });

            modelBuilder.Entity("CarPark.TimeZones.TzInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IanaTzId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iana_tz_id");

                    b.Property<string>("WindowsTzId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("windows_tz_id");

                    b.HasKey("Id")
                        .HasName("pk_time_zone");

                    b.ToTable("time_zone", (string)null);
                });

            modelBuilder.Entity("CarPark.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AddedToEnterpriseAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_to_enterprise_at");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacture_year");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer")
                        .HasColumnName("mileage");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin_number");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex("EnterpriseId")
                        .HasDatabaseName("ix_vehicle_enterprise_id");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_vehicle_model_id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("CarPark.Vehicles.VehicleGeoTimePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry (point, 4326)")
                        .HasColumnName("location");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_geo_time_point");

                    b.HasIndex("vehicle_id")
                        .HasDatabaseName("ix_vehicle_geo_time_point_vehicle_id");

                    b.ToTable("vehicle_geo_time_point", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("driver_vehicle_assignment", b =>
                {
                    b.Property<Guid>("AssignedDriversId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_drivers_id");

                    b.Property<int>("AssignedVehiclesId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_vehicles_id");

                    b.HasKey("AssignedDriversId", "AssignedVehiclesId")
                        .HasName("pk_driver_vehicle_assignment");

                    b.HasIndex("AssignedVehiclesId")
                        .HasDatabaseName("ix_driver_vehicle_assignment_assigned_vehicles_id");

                    b.ToTable("driver_vehicle_assignment", (string)null);
                });

            modelBuilder.Entity("enterprise_manager", b =>
                {
                    b.Property<int>("EnterprisesId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprises_id");

                    b.Property<Guid>("ManagersId")
                        .HasColumnType("uuid")
                        .HasColumnName("managers_id");

                    b.HasKey("EnterprisesId", "ManagersId")
                        .HasName("pk_enterprise_manager");

                    b.HasIndex("ManagersId")
                        .HasDatabaseName("ix_enterprise_manager_managers_id");

                    b.ToTable("enterprise_manager", (string)null);
                });

            modelBuilder.Entity("CarPark.Drivers.Driver", b =>
                {
                    b.HasOne("CarPark.Enterprises.Enterprise", null)
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_driver_enterprise_enterprise_id");

                    b.HasOne("CarPark.Vehicles.Vehicle", "ActiveAssignedVehicle")
                        .WithOne("ActiveAssignedDriver")
                        .HasForeignKey("CarPark.Drivers.Driver", "assigned_vehicle_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_driver_vehicle_assigned_vehicle_id");

                    b.Navigation("ActiveAssignedVehicle");
                });

            modelBuilder.Entity("CarPark.Enterprises.Enterprise", b =>
                {
                    b.HasOne("CarPark.TimeZones.TzInfo", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("fk_enterprise_tz_infos_time_zone_id");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("CarPark.Managers.Manager", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_manager_asp_net_users_identity_user_id");
                });

            modelBuilder.Entity("CarPark.Rides.Ride", b =>
                {
                    b.HasOne("CarPark.Vehicles.VehicleGeoTimePoint", "EndPoint")
                        .WithMany()
                        .HasForeignKey("end_geo_time_point_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_ride_vehicle_geo_time_point_end_geo_time_point_id");

                    b.HasOne("CarPark.Vehicles.VehicleGeoTimePoint", "StartPoint")
                        .WithMany()
                        .HasForeignKey("start_geo_time_point_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_ride_vehicle_geo_time_point_start_geo_time_point_id");

                    b.HasOne("CarPark.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_ride_vehicle_vehicle_id");

                    b.Navigation("EndPoint");

                    b.Navigation("StartPoint");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarPark.Vehicles.Vehicle", b =>
                {
                    b.HasOne("CarPark.Enterprises.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_enterprise_enterprise_id");

                    b.HasOne("CarPark.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_model_model_id");

                    b.Navigation("Enterprise");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarPark.Vehicles.VehicleGeoTimePoint", b =>
                {
                    b.HasOne("CarPark.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_geo_time_point_vehicle_vehicle_id");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("driver_vehicle_assignment", b =>
                {
                    b.HasOne("CarPark.Drivers.Driver", null)
                        .WithMany()
                        .HasForeignKey("AssignedDriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_vehicle_assignment_driver_assigned_drivers_id");

                    b.HasOne("CarPark.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("AssignedVehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_vehicle_assignment_vehicle_assigned_vehicles_id");
                });

            modelBuilder.Entity("enterprise_manager", b =>
                {
                    b.HasOne("CarPark.Enterprises.Enterprise", null)
                        .WithMany()
                        .HasForeignKey("EnterprisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enterprise_manager_enterprise_enterprises_id");

                    b.HasOne("CarPark.Managers.Manager", null)
                        .WithMany()
                        .HasForeignKey("ManagersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enterprise_manager_manager_managers_id");
                });

            modelBuilder.Entity("CarPark.Vehicles.Vehicle", b =>
                {
                    b.Navigation("ActiveAssignedDriver");
                });
#pragma warning restore 612, 618
        }
    }
}
