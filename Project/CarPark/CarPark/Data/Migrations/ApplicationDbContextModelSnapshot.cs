// <auto-generated />
using CarPark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarPark.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarPark.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_license_number");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id")
                        .HasName("pk_driver");

                    b.HasIndex("EnterpriseId")
                        .HasDatabaseName("ix_driver_enterprise_id");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("CarPark.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_enterprise");

                    b.ToTable("enterprise", (string)null);
                });

            modelBuilder.Entity("CarPark.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("EnginePowerKW")
                        .HasColumnType("double precision")
                        .HasColumnName("engine_power_kw");

                    b.Property<string>("FuelSystemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuel_system_type");

                    b.Property<string>("FuelTankVolumeLiters")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuel_tank_volume_liters");

                    b.Property<double>("MaxLoadingWeightKg")
                        .HasColumnType("double precision")
                        .HasColumnName("max_loading_weight_kg");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("integer")
                        .HasColumnName("seats_count");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transmission_type");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id")
                        .HasName("pk_model");

                    b.ToTable("model", (string)null);
                });

            modelBuilder.Entity("CarPark.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacture_year");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer")
                        .HasColumnName("mileage");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin_number");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex("EnterpriseId")
                        .HasDatabaseName("ix_vehicle_enterprise_id");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_vehicle_model_id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("driver_vehicle_assignment", b =>
                {
                    b.Property<int>("AssignedDriversId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_drivers_id");

                    b.Property<int>("AssignedVehiclesId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_vehicles_id");

                    b.HasKey("AssignedDriversId", "AssignedVehiclesId")
                        .HasName("pk_driver_vehicle_assignment");

                    b.HasIndex("AssignedVehiclesId")
                        .HasDatabaseName("ix_driver_vehicle_assignment_assigned_vehicles_id");

                    b.ToTable("driver_vehicle_assignment", (string)null);
                });

            modelBuilder.Entity("CarPark.Models.Driver", b =>
                {
                    b.HasOne("CarPark.Models.Enterprise", null)
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_enterprise_enterprise_id");

                    b.HasOne("CarPark.Models.Vehicle", "ActiveAssignedVehicle")
                        .WithOne("ActiveAssignedDriver")
                        .HasForeignKey("CarPark.Models.Driver", "Id")
                        .HasConstraintName("fk_driver_vehicle_id");

                    b.Navigation("ActiveAssignedVehicle");
                });

            modelBuilder.Entity("CarPark.Models.Vehicle", b =>
                {
                    b.HasOne("CarPark.Models.Enterprise", null)
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_enterprise_enterprise_id");

                    b.HasOne("CarPark.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_model_model_id");
                });

            modelBuilder.Entity("driver_vehicle_assignment", b =>
                {
                    b.HasOne("CarPark.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("AssignedDriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_vehicle_assignment_driver_assigned_drivers_id");

                    b.HasOne("CarPark.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("AssignedVehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driver_vehicle_assignment_vehicle_assigned_vehicles_id");
                });

            modelBuilder.Entity("CarPark.Models.Vehicle", b =>
                {
                    b.Navigation("ActiveAssignedDriver");
                });
#pragma warning restore 612, 618
        }
    }
}
