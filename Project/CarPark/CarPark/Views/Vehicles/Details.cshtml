@using CarPark.ViewModels.Vehicles
@model VehicleViewModel

@{
    ViewData["Title"] = $"Vehicle Details - {ViewBag.Enterprise?.Name}";
    var now = DateTimeOffset.Now;
    var oneWeekAgo = now.AddDays(-7);
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Vehicle Details - @ViewBag.Enterprise?.Name</h1>
    <div>
        <a asp-action="Index" asp-route-enterpriseId="@ViewBag.Enterprise?.Id" class="btn btn-secondary">Back to List</a>
    </div>
</div>

<div>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Enterprise.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Enterprise.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.VinNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.VinNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ManufactureYear)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ManufactureYear)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Mileage)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Mileage)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Color)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Color)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AddedToEnterpriseAt)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AddedToEnterpriseAt)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-enterpriseId="@ViewBag.Enterprise.Id" asp-route-id="@Model?.Id" class="btn btn-primary">Edit</a>
    <a asp-action="Delete" asp-route-enterpriseId="@ViewBag.Enterprise.Id" asp-route-id="@Model?.Id" class="btn btn-danger">Delete</a>
</div>

<h2>Rides</h2>

<form asp-area="" asp-action="Index" asp-controller="Tracks" method="get"
      asp-route-enterpriseId="@ViewBag.Enterprise.Id"
      asp-route-vehicleId="@Model.Id">
    <div class="mb-3">
        <label for="startTimeInput" class="form-label">Start Time</label>
        <input type="datetime-local" id="startTimeInput" name="startDate" class="form-control"
               value="@oneWeekAgo.ToString("yyyy-MM-ddTHH:mm")" />
    </div>

    <div class="mb-3">
        <label for="endTimeInput" class="form-label">End Time</label>
        <input type="datetime-local" id="endTimeInput" name="endDate" class="form-control"
               value="@now.ToString("yyyy-MM-ddTHH:mm")" />
    </div>

    <button type="submit" class="btn btn-primary">Open map</button>
</form>

<div id="ridesContainer">
</div>

@section Scripts {
    <script src="~/lib/axios/axios.js"></script>
    <script src="~/js/rides/rides-client.js"></script>

    <script>
    async function loadRides() {
        const vehicleId = @Model.Id;

        // Берём значения из input
        const startTime = document.getElementById("startTimeInput").value;
        const endTime = document.getElementById("endTimeInput").value;

        const rides = await getRides(vehicleId, startTime, endTime);

        const container = document.getElementById("ridesContainer");
        container.innerHTML = "";

        (rides || []).forEach(ride => {
            const rideDl = document.createElement("dl");
            rideDl.classList.add("row");

            rideDl.innerHTML = `
                <dt class="col-sm-2">Id</dt>
                <dd class="col-sm-10">${ride.id}</dd>

                <dt class="col-sm-2">Start time</dt>
                <dd class="col-sm-10">${new Date(ride.startTime).toLocaleString()}</dd>

                <dt class="col-sm-2">End time</dt>
                <dd class="col-sm-10">${new Date(ride.endTime).toLocaleString()}</dd>

                <dt class="col-sm-2">Start geo point</dt>
                <dd class="col-sm-10">(${ride.startGeoPoint.x}, ${ride.startGeoPoint.y})</dd>

                <dt class="col-sm-2">End geo point</dt>
                <dd class="col-sm-10">(${ride.endGeoPoint.x}, ${ride.endGeoPoint.y})</dd>
            `;

            container.appendChild(rideDl);
        });
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Первая загрузка
            loadRides();

            // Подписка на изменение дат
            document.getElementById("startTimeInput").addEventListener("change", loadRides);
            document.getElementById("endTimeInput").addEventListener("change", loadRides);
        });
    </script>
}